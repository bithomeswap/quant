import math
from jqdata import *
import pandas as pd
import json
def initialize(context):
    # 设置交易日计数器
    context.day_counter = 0
    # 初始化函数，在此处添加打印语句
    print('任务已经开始')
    # 设定沪深300、中证1000、上证指数作为基准
    # set_benchmark('000300.XSHG')
    # set_benchmark('000852.XSHG')
    set_benchmark('000001.XSHG')
    # # 设置成交量比例
    # set_option('order_volume_ratio', 0.1)
    # # 开启盘口撮合模式
    # set_option('match_with_order_book', True)
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 开启避免未来函数模式
    set_option("avoid_future_data", True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 过滤掉order系列API产生的比error级别低的log
    log.set_level('order', 'error')
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    # 定时运行买入卖出函数
    run_daily(buy, time='9:35')
    run_daily(sell, time='14:00')
    g.buystocks=pd.DataFrame() # 储存拟买入的标的
    g.sellstocks=pd.DataFrame() # 储存拟卖出的标的
    g.allorders=pd.DataFrame() # 储存历史订单
    # g.road='CTA'
    g.road='no'
    g.name = ("000", "001", "002", "600", "601", "603", "605") # 主板
    # g.name = ("300", "688") # 创业板
    # g.name = ("ETF")
def after_trading_end(context):
    today = context.current_dt.date()
    if "ETF" in g.name:
        df = get_all_securities(types=['etf'],date=today)
        df = df.index
        stocks = df.tolist()
        df = get_price(stocks, start_date=today,end_date=today, fields=['open', 'high', 'low', 'close', 'money'],panel=False )
        df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 'close': '收盘', 'money': '成交额'})
        df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
        df['资金波动'] = df['振幅'] / df['成交额']
        df = df.sort_values(by=['资金波动'], ascending=False)
        df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
        df=df[df['资金波动_rank']<0.1]
        g.buystocks=df
    if  "000" or "300" in g.name:
        name=g.name
        df = get_all_securities(types=['stock'],date=today).index
        df = df[df.str.startswith(name)].tolist()
        curr_data = get_current_data()
        stocks=[stock for stock in df if not (
            (curr_data[stock].day_open == curr_data[stock].high_limit) or  # 涨停开盘
            (curr_data[stock].day_open == curr_data[stock].low_limit) or  # 跌停开盘
            curr_data[stock].paused or  # 停牌
            curr_data[stock].is_st 
            # or  # ST
            # ('ST' in curr_data[stock].name) or
            # ('*' in curr_data[stock].name) or
            # ('退' in curr_data[stock].name)
            )]
        df = get_price(stocks, start_date=today,end_date=today, fields=['open', 'high', 'low', 
            'close','pre_close','money'],panel=False )
        df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 
            'close': '收盘','pre_close':'前收','money': '成交额'})
        # 增加基本面数据
        df_fundamentals = get_fundamentals(query(
            valuation.code, valuation.market_cap, valuation.pe_ratio,income.total_operating_revenue,
            balance.total_assets, balance.total_liability), date=today)
        df_fundamentals = df_fundamentals.rename(columns={"code": "代码", "market_cap":"总市值","pe_ratio":"市盈率",
                                            "total_operating_revenue":"营收","total_assets": "总资产", "total_liability": "总负债"})
        df= pd.merge(df, df_fundamentals, on='代码') # 增加设置基本面因子
        # df_valuation= get_valuation(stocks,end_date=today,count=1,fields=['capitalization', 'market_cap','turnover_ratio'])
        # df_valuation = df_valuation.rename(columns={'code': '代码','turnover_ratio': '换手率'})
        # df= pd.merge(df, df_valuation, on='代码') # 增加设置换手率因子
        # 资金波动因子(反映控盘程度)
        df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
        df['资金波动'] = df['振幅'] / df['成交额']
        # df['涨跌幅'] = df['收盘'] / df['前收']
        # df['资金贡献'] = (df['涨跌幅'] / df['成交额'])-1 # 也可能不用减一，回测试一试
        # # 基本面市销率因子(反映成长性)加不加区别不大
        # df['净资产']= df['总资产'] - df['总负债']
        df['市销率']=(df['总市值']*10000000)/df['营收']
        # df['市净率']=(df['总市值']*10000000)/df['净资产']
        df['市盈率']=1/df['市盈率']
        # # 股票筛选（放前面在行情差的时候效果好，整体回撤小）
        # df = df[(df['市销率']>(1/3))] # 市销率为1有1600+股票，为1.5有2000+股票
        # # df = df[(df['市净率']>(1/3))] # 市销率为1有1600+股票，为1.5有2000+股票
        # df = df[(df['市盈率']>(1/50))] # 市销率为1有1600+股票，为1.5有2000+股票
        # # 截面因子（标的排名因子）
        df = df.sort_values(by=['资金波动'], ascending=False)
        df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
        # dfall=df[df['资金波动_rank']<0.03] # 资金波动0.03可以加上基本面因子之后单独作为策略
        dfall=df[df['资金波动_rank']<0.1]
        
        # df = df.sort_values(by=['资金贡献'], ascending=False)
        # df['资金波动_rank'] = df['资金贡献'].rank(ascending=False)/len(df)
        # dfall=df[df['资金贡献_rank']<0.1]
        # 股票筛选（放后面在行情好的时候牛市效果好，收益高局部回撤小）
        df = df[(df['市销率']>(1/3))] # 市销率为1有1600+股票，为1.5有2000+股票
        # df = df[(df['市净率']>(1/3))] # 市销率为1有1600+股票，为1.5有2000+股票
        df = df[(df['市盈率']>(1/50))] # 市销率为1有1600+股票，为1.5有2000+股票
        
        df=dfall
        df= df.nsmallest(10, f"总市值")
        # df= df.nsmallest(10, f"收盘")
        
        for ctastock in df['代码']: # CTA因子确认（好像效果不好）
            n=3
            df_cta = get_price(ctastock,count=n,end_date=today, frequency='daily',skip_paused=True,fields=['open'],panel=False)
            if not(any(df_cta['open'][n-1] < df_cta['open'].iloc[:n-1].values)): # 破n日高点买入,否则去掉
                df=df[df['代码']!=ctastock] # 删除元素
                # print(ctastock,f'未突破{n}日前高')
        
        g.buystocks=df
        # 观察目标股票占整体候选股票的比例，如果比较高说明比较安全可以交易，比较低就比较危险，需要谨慎。
        # print(len(df),len(dfall))
        # 2014.6:0.25-0.5
        # 2015.6:0.1-0.25
        # 2016.6:0.2-0.3
        # 2017.6:0.1-0.25
        # 2018.6:0.25-0.35
        # if len(df)>len(dfall)*0.1:
        #     g.buystocks=df # 将拟购买标的赋值给全局变量
        # else:
        #     g.buystocks=pd.DataFrame() #市场危险，不宜建仓
        if not g.buystocks.empty: # 持仓权重确认（不超过百分之五）
            for newstock in g.buystocks['代码']:
                position=context.portfolio.positions.keys()
                for stock in position:
                    if context.portfolio.positions[stock].security==newstock:
                        # # 已有持仓不买入，效果不好
                        # g.buystocks=g.buystocks[g.buystocks['代码']!=newstock] # 删除元素
                        # print(context.portfolio.positions[stock].security,'已有持仓，不宜买入')
                        # 持仓过重不买入，效果不好
                        if(context.portfolio.positions[stock].closeable_amount+context.portfolio.positions[stock].locked_amount)>(context.portfolio.total_value/10):
                            g.buystocks=g.buystocks[g.buystocks['代码']!=newstock] # 删除元素
                            print(context.portfolio.positions[stock].security,'仓位过重，不宜买入')
        if not g.buystocks.empty:
            print(g.buystocks['代码'],type(g.buystocks['代码']))

# 固定时间交易
def buy(context):
    today = context.current_dt.date()
    if not g.buystocks.empty:
        if "ETF" in g.name:
            buy_lists=(g.buystocks['代码']).tolist()
            buy_list=[]
            if(len(buy_lists))>0:
                n=3
                for stock in buy_lists:
                    df = get_price(stock,count=n,end_date=today, frequency='daily',skip_paused=True,
                        fields=['open'],panel=False)
                    if df['open'][n-1]>df['open'][0]: # 突破n日突破前高
                        buy_list.append(stock)
                print(buy_list)
            # if((len(buy_list))>0) and ((context.day_counter% 250)>10): # 有数据便交易，每250交易日平一次仓
            if((len(buy_list))>0): # CTA无需刻意平仓
                context.day_counter
                for stock in buy_list:
                    m=30 # 设置建仓周期
                    if(context.portfolio.available_cash)<(context.portfolio.total_value/m):
                        target_value =context.portfolio.available_cash
                    else:
                        target_value =context.portfolio.total_value/m
                    value_per_stock = target_value/len(buy_list)
                    order=order_value(stock, value_per_stock)
                    # log.info("Buying", order)
            context.day_counter += 1
        if  "000" or "300" in g.name:
            buy_lists=g.buystocks
            buy_list=[]
            if(len(buy_lists))>0:
                n=3
                for stock in buy_lists['代码']: # 开盘价过滤低价股
                    df = get_price(stock,count=n,end_date=today, frequency='daily',skip_paused=True,
                        fields=['open'],panel=False)
                    if (df['open'][n-1]>4) and not(get_current_data()[stock].paused):
                        # 开盘价高于4元且当日不停牌
                        buy_list.append(stock)
            if(len(buy_list))>0:
                for stock in buy_list:
                    m=30 # 设置建仓周期（30天一周期的话大概百分之二十收益率）
                    if(context.portfolio.available_cash)<(context.portfolio.total_value/m):
                        target_value =context.portfolio.available_cash
                    else:
                        target_value =context.portfolio.total_value/m
                    value_per_stock = target_value/len(buy_list)
                    order=order_value(stock, value_per_stock)
                    # log.info("Buying", order)
            context.day_counter += 1
def sell(context):
    if  "000" or "300" in g.name:
        today = context.current_dt.date()
        orders = get_orders()
        i=0
        df = pd.DataFrame(columns=['order_id','status','security','price','amount',
                'avg_cost','Time','is_buy','filled','side','action'])
        for _orders in orders.values():
            if (str(_orders.status)!='canceled') and(str(_orders.action)!='close'): # 去掉未成交订单
                df.loc[i,'order_id'] = _orders.order_id
                df.loc[i,'status'] = str(_orders.status) # 订单状态
                df.loc[i, 'security'] = _orders.security # 代码（str）
                df.loc[i,'price'] = _orders.price # 委托价格（float）
                df.loc[i,'amount'] = _orders.amount # 委托数量(int)
                df.loc[i,'avg_cost'] = _orders.avg_cost # 交易均价（float）
                df.loc[i, 'Time'] = _orders.add_time # 委托时间(datetime.datetime)
                df.loc[i, 'filled'] = _orders.filled # 已成交量(int)，可能是手数
                df.loc[i, 'side'] = _orders.side # 多头还是空头(str)
                df.loc[i, 'action'] = _orders.action # 开仓还是平仓（进场还是出场）(str)
                i=i+1
        g.allorders=pd.concat([g.allorders,df],ignore_index=True)
        for order_id in g.allorders['order_id']:
            df=g.allorders[g.allorders['order_id'] == order_id]
            stock=df['security'].values[0]
            starttime=df['Time'].values[0].date()
            hold_days = (today - starttime).days
            if (hold_days >= 1) and not(get_current_data()[stock].paused): # 持仓大于一天且当日不停牌
                n=hold_days # 设置趋势观察周期
                df_cta = get_price(stock,count=n,end_date=today, frequency='daily',skip_paused=True,fields=['open'],panel=False)
                if df_cta['open'][n-1]<df['avg_cost'].values[0]*0.95:# 浮亏百五卖出（止损）
                    take='止损'
                    sellorder=order(stock,-df['filled'].values[0])
                    log.info("selling",take,sellorder)
                    if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
                        g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()
                    break
                # if (hold_days >= 3):
                #     if not(any(df_cta['open'][2] > df_cta['open'].iloc[:2].values)): # 破三日新低卖出
                #         take='破位'
                #         sellorder=order(stock,-df['filled'].values[0])
                #         log.info("selling",take,sellorder)
                #         if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
                #             g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()
                #         break
                if (hold_days >= 10) and not(get_current_data()[stock].paused):
                    divisors = np.arange(1, len(df_cta)+1) 
                    df_rate = ((df_cta/(df['avg_cost'].values[0]))-1).div(divisors, axis=0)
                    df_rate=df_rate['open'].max() # 定义历史斜率最大值为盈利斜率
                    # 止损线上移，每日上移一个盈利斜率
                    if(df_cta['open'][n-1] < (df['avg_cost'].values[0])*(0.95+df_rate*hold_days)):
                        take='长期止损'
                        sellorder=order(stock,-df['filled'].values[0])
                        log.info("selling",take,sellorder)
                        if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
                            g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()
                        break
                if not(get_current_data()[stock].paused):
                    df_lastrate = df_cta['open']/df_cta['open'].shift(1)
                    lastindex=pd.Index(df_lastrate > 1.09).where(df_lastrate>1.09).tolist()
                    last=list(filter(lambda x: not math.isnan(x), lastindex))
                    if (len(last)>0): # 判断持仓期间是否有涨停
                        index=len(lastindex)-lastindex[::-1].index(True)
                        if index<5: # 上次涨停位置<5 且 最高点回撤>0.2
                            if df_cta['open'][n-1]<df_cta['open'].max()*0.8:
                                take='赶顶'
                                sellorder=order(stock,-df['filled'].values[0])
                                log.info("selling",take,sellorder)
                                if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
                                    g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()
                                break
                    if (hold_days >= 10) and ((len(last)==0) or ((len(last)>0) and (index>10))):
                        if df_rate<((df_cta['open'][n-1]/df_cta['open'][n-4])-1)and (df_cta['open'][n-1]<0):
                            take='回调'
                            sellorder=order(stock,-df['filled'].values[0])
                            log.info("selling",take,sellorder)
                            if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
                                g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()
                            break
            # if hold_days >= 30:
            #     sellorder=order(stock,-df['filled'].values[0])
            #     # log.info("selling", sellorder)
            #     if sellorder!=None: # 避免股票停牌等异常导致order的返回值为空值进而导致当日无法交易
            #         g.allorders = g.allorders[g.allorders['order_id']!= order_id].copy()