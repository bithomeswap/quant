import math
import pandas as pd

def initialize(context):
    # 设置初始资金
    context.init_cash = 10000000
    # 设置交易日计数器
    context.day_counter = 0
    # 初始化函数，在此处添加打印语句
    print('任务已经开始')
    # 设定沪深300、中证1000、上证指数作为基准
    set_benchmark('000300.XSHG')
    # set_benchmark('000852.XSHG')
    # set_benchmark('000001.XSHG')
    
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 开启避免未来函数模式
    set_option("avoid_future_data", True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 过滤掉order系列API产生的比error级别低的log
    log.set_level('order', 'error')
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    
    # 定时运行买入卖出函数
    run_daily(buy, time='9:35') 
    run_daily(sell, time='14:00')     
    
    g.stocks=[]
def after_trading_end(context):
    today = context.current_dt.date()
    name = ("000", "001", "002", "600", "601", "603", "605") # 主板
    # name = ("300", "688") # 创业板
    # name=("ETF")

    if "ETF" in name:
        # 获取ETF
        df = get_all_securities(types=['etf'],date=today)
        df = df[~(df['display_name'].str.contains("S")|df["display_name"].str.contains("退"))].index
        
        stocks = df.tolist()
        df = get_price(stocks, start_date=today,end_date=today, fields=['open', 'high', 'low', 'close', 'money'],panel=False )
        df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 'close': '收盘', 'money': '成交额'})
        df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
        df['资金波动'] = df['振幅'] / df['成交额']
        df = df.sort_values(by=['资金波动'], ascending=False)
        df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
        df=df[df['资金波动_rank']<0.01]
        # df = df.nsmallest(1, '开盘') # 盈亏比高，回撤较大
        df = df.nsmallest(1, '资金波动_rank') # 盈亏比低，回撤较小
        df=df.loc[:, ["代码",'开盘','收盘', "总市值","资产负债率", "市销率", "市净率"]]
        print(df)
        g.stocks=df['代码']

    if "300" in name: # 科创板需要设置保护限价（未完成）
        # df = get_all_securities(types=['stock']).index
        df = get_all_securities(types=['stock'],date=today)
        df = df[~(df['display_name'].str.contains("S")|df["display_name"].str.contains("退"))].index
        stocks = df[df.str.startswith(name)].tolist()
        df = get_price(stocks, start_date=today,end_date=today, fields=['open', 'high', 'low', 'close', 'money'],panel=False )
        df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 'close': '收盘', 'money': '成交额'})
        df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
        df['资金波动'] = df['振幅'] / df['成交额']
        df = df.sort_values(by=['资金波动'], ascending=False)
        df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
        df=df[df['资金波动_rank']<0.01]
        df=df[df['收盘']>=4]# 限制购买4元以下的个股
        # 过滤市值小于一百亿的股票、市盈率不在0-20之间的股票、市净率不在0-3之间的股票
        df_price = get_fundamentals(query(
            valuation.code, valuation.market_cap, valuation.pe_ratio,
            income.total_operating_revenue), date=today)
        df_price = df_price.rename(columns={"code": "代码", "total_operating_revenue": "营收",
                                            "market_cap":"总市值","pe_ratio":"市盈率",
                                            "total_equity":"净资产"})
        df_balance = get_fundamentals(query(balance.code, balance.total_assets, balance.total_liability), date=today)
        df_balance = df_balance.rename(columns={"code": "代码", "total_assets": "总资产", "total_liability": "总负债"})
        df= pd.merge(df, df_price, on='代码')
        df= pd.merge(df, df_balance, on='代码')
        df["净资产"] = df['总资产'] - df['总负债']
        df['市销率']=df['营收']/df['总市值']*100000000
        df['市净率']=df['净资产']/df['总市值']*100000000
        df['资产负债率']=df['净资产']/df['总负债']
        # 高资金波动策略
        df = df.nsmallest(1, '资金波动_rank') # 2015年至今盈亏比1.6,可能有碰到退市
        # # 小市值策略
        # df = df[df['总市值'] <= 100]
        # df = df.nsmallest(1, '总市值') # 2015年至今盈亏比1.724
        # df = df.nsmallest(1, '开盘') # # 2015年至今盈亏比1.56，熊市回撤大
        # # 以下策略基本没有市场
        # df = df.nlargest(1, '市销率') # 收益不高且不稳定没有市场空间,核心是关联度低不是有效因子
        # df = df.nlargest(1, '资产负债率') # 收益不高,牛市盈亏比不到3
        # df = df.nlargest(1, '市净率') # 收益过低,牛市盈亏比不到5
        df=df.loc[:, ["代码",'开盘','收盘', "总市值","资产负债率", "市销率", "市净率"]]
        print(df)
        g.stocks=df['代码']
        
    if  "000" in name:
        # df = get_all_securities(types=['stock']).index
        df = get_all_securities(types=['stock'],date=today)
        df = df[~(df['display_name'].str.contains("S")|df["display_name"].str.contains("退"))].index
        
        stocks = df[df.str.startswith(name)].tolist()
        df = get_price(stocks, start_date=today,end_date=today, fields=['open', 'high', 'low', 'close', 'money'],panel=False )
        df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 'close': '收盘', 'money': '成交额'})
        df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
        df['资金波动'] = df['振幅'] / df['成交额']
        df = df.sort_values(by=['资金波动'], ascending=False)
        df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
        df=df[df['资金波动_rank']<0.01]
        df=df[df['收盘']>=4]# 限制购买4元以下的个股
        # 过滤市值小于一百亿的股票、市盈率不在0-20之间的股票、市净率不在0-3之间的股票
        df_price = get_fundamentals(query(
            valuation.code, valuation.market_cap, valuation.pe_ratio,
            income.total_operating_revenue), date=today)
        df_price = df_price.rename(columns={"code": "代码", "total_operating_revenue": "营收",
                                            "market_cap":"总市值","pe_ratio":"市盈率",
                                            "total_equity":"净资产"})
        # df_balance = get_fundamentals(query(balance.code, balance.total_assets, balance.total_liability), date=today)
        # df_balance = df_balance.rename(columns={"code": "代码", "total_assets": "总资产", "total_liability": "总负债"})
        df= pd.merge(df, df_price, on='代码')
        # df= pd.merge(df, df_balance, on='代码')
        # df["净资产"] = df['总资产'] - df['总负债']
        # df['市销率']=df['营收']/df['总市值']*100000000
        # df['市净率']=df['净资产']/df['总市值']*100000000
        # df['资产负债率']=df['净资产']/df['总负债']
        # # 高资金波动策略
        # df = df.nsmallest(1, '资金波动_rank') # 2015年至今盈亏比1.6,可能有碰到退市
        # 小市值策略
        df = df[df['总市值'] <= 100]
        df = df.nsmallest(1, '总市值') # 2015年至今盈亏比1.724
        # df = df.nsmallest(1, '开盘') # # 2015年至今盈亏比1.56，熊市回撤大
        # # 以下策略基本没有市场
        # df = df.nlargest(1, '市销率') # 收益不高且不稳定没有市场空间,核心是关联度低不是有效因子
        # df = df.nlargest(1, '资产负债率') # 收益不高,牛市盈亏比不到3
        # df = df.nlargest(1, '市净率') # 收益过低,牛市盈亏比不到5
        df=df.loc[:, ["代码",'开盘','收盘', "总市值","资产负债率", "市销率", "市净率"]]
        print(df)
        g.stocks=df['代码']
        
# # 固定时间交易（含CTA）
# def buy(context):


#     today = context.current_dt.date()
#     end_date
#     df = get_price(stocks, start_date=today,end_date=end_date, fields=['open', 'high', 'low', 'close', 'money'],panel=False )
#     df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 'close': '收盘', 'money': '成交额'})
#     df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
#     df['资金波动'] = df['振幅'] / df['成交额']
#     df = df.sort_values(by=['资金波动'], ascending=False)
#     df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
#     df=df[df['资金波动_rank']<0.01]
    
    
#     # 如果有符合条件的股票，则平均买入
#     buy_list=g.stocks
#     if len(buy_list) > 0:
#         if context.day_counter < 30:
#             target_value = context.init_cash * (1/30)*0.98
#         else:
#             target_value = context.portfolio.portfolio_value * 0.98
#         value_per_stock = target_value / len(buy_list)
#         for stock in buy_list:
#             order_target_value(stock, value_per_stock)
#             log.info("Buying %s", stock)
#     # 交易日计数器增加1
#     context.day_counter += 1
# def sell(context):
#     today = context.current_dt.date()

#     for stock in context.portfolio.positions:
#         hold_days = (today - context.portfolio.positions[stock].init_time.date()).days
#         if hold_days >= 30:
#             order_target_value(stock, 0)
#             log.info("Selling %s", stock)
            
# 固定时间交易（不含CTA）
def buy(context):
    today = context.current_dt.date()
    # 如果有符合条件的股票，则平均买入
    buy_list=g.stocks
    if len(buy_list) > 0:
        if context.day_counter < 30:
            target_value = context.init_cash * (1/30)*0.98
        else:
            target_value = context.portfolio.portfolio_value * 0.98
        value_per_stock = target_value / len(buy_list)
        for stock in buy_list:
            order_target_value(stock, value_per_stock)
            log.info("Buying %s", stock)
    # 交易日计数器增加1
    context.day_counter += 1
def sell(context):
    today = context.current_dt.date()
    for stock in context.portfolio.positions:
        hold_days = (today - context.portfolio.positions[stock].init_time.date()).days
        if hold_days >= 30:
            order_target_value(stock, 0)
            log.info("Selling %s", stock)

# # 开盘交易
# def handle_data(context, data):
#     today = context.current_dt.date()
#     print(g.stocks)
#     # 如果股票满足以下条件则进入交易池
#     buy_list = []
#     for stock in g.stocks:
#         # 获取股票的当前价格和前一天的价格
#         price = attribute_history(stock, 2, '1d', ['open'], df=False)['open']
#         # 判断股票是否在停牌状态，昨天或今天的开盘价为0
#         if price[0] == 0 or price[1] == 0:
#             continue
#         # 判断是否涨跌停
#         close_price = attribute_history(stock, 2, '1d', ['close'], df=False)['close']
#         if close_price[0]*0.99 > price[1] :
#             continue
#         if close_price[0]*1.08 <= price[1] :
#             continue
#         # 如果符合条件，则将股票加入买入列表中
#         buy_list.append(stock)
#     print(buy_list)
#     # 卖出持仓超过30个交易日的股票
#     for stock in context.portfolio.positions:
#         hold_days = (today - context.portfolio.positions[stock].init_time.date()).days
#         if hold_days >= 30:
#             order_target_value(stock, 0)
#             log.info("Selling %s", stock)
#     # 如果有符合条件的股票，则平均买入
#     if len(buy_list) > 0:
#         if context.day_counter < 30:
#             target_value = context.init_cash * (1/30)*0.98
#         else:
#             target_value = context.portfolio.portfolio_value * 0.98
#         value_per_stock = target_value / len(buy_list)
#         for stock in buy_list:
#             order_target_value(stock, value_per_stock)
#             log.info("Buying %s", stock)
#     # 交易日计数器增加1
#     context.day_counter += 1

       