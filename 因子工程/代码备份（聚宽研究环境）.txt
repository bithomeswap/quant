# !python -m pip install --upgrade pip --user
# !python -m pip install pandas
# !python -m pip install xarray
# !python -m pip install datetime
# !python -m pip install pymongo


# from jqdata import *
# import pandas as pd
# from pymongo import MongoClient
# import datetime
# client = MongoClient(
#     "mongodb://wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000")
# db = client["wth000"]
# name = ("000", "001", "002", "600", "601", "603", "605")
# collection = db[f"聚宽非ST股票{name}"]
# end_date= datetime.date(2018, 1, 1)
# start_date = datetime.date.today()  # 结束日期为今天
# delta = datetime.timedelta(days=1)  # 时间间隔为一天
# today = start_date
# dates = collection.distinct("日期")
# collection.drop()
# print("已收录日期数据",dates)
# while today >= end_date:
#     today -= delta
#     df = get_all_securities(types=['stock'], date=today)
#     df = df[~df['display_name'].str.contains("S")]
#     df = df[~df['display_name'].str.contains("退")]
#     df=df.index
#     stocks = df[df.str.startswith(name)].tolist()
# #     df = get_all_securities(types=['stock'],date=today).index
# #     stocks = df[df.str.startswith(name)].tolist()
#     df = get_price(stocks,count=1,end_date=today-datetime.timedelta(days=1),fields=['open', 'high', 'low', 
#     'close','pre_close','money'],panel=False)
#     df = df.rename(columns={'code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 
#         'close': '收盘','pre_close':'昨收','money': '成交额'})
#     # 增加基本面数据
#     df_fundamentals = get_fundamentals(query(
#         valuation.code, valuation.market_cap, valuation.pe_ratio,income.total_operating_revenue,
#         balance.total_assets, balance.total_liability), date=today-datetime.timedelta(days=1),)
#     df_fundamentals = df_fundamentals.rename(columns={"code": "代码", "market_cap":"总市值","pe_ratio":"市盈率",
#                                         "total_operating_revenue":"营收","total_assets": "总资产", "total_liability": "总负债"})
#     df= pd.merge(df, df_fundamentals, on='代码') # 增加设置基本面因子
# #     df_valuation= get_valuation(stocks,count=1,end_date=today-datetime.timedelta(days=1),fields=['capitalization', 'market_cap','turnover_ratio'])
# #     df_valuation = df_valuation.rename(columns={'code': '代码','turnover_ratio': '换手率'})
# #     df= pd.merge(df, df_valuation, on='代码') # 增加设置换手率因子
#     # 资金波动因子(反映控盘程度)
#     df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
#     df['资金波动'] = df['振幅'] / df['成交额']
#     df['涨跌幅'] = df['收盘'] / df['昨收']
#     df['资金贡献'] = (df['涨跌幅'] / df['成交额'])-1
#     # # 基本面市销率因子(反映成长性)加不加区别不大
#     df['净资产']= df['总资产'] - df['总负债']
#     df['市销率']=(df['总市值']*10000000)/df['营收']
#     df['市净率']=(df['总市值']*10000000)/df['净资产']
#     df['市盈率']=1/df['市盈率']
#     # # 截面因子（标的排名因子）
#     df['总市值_rank'] = df['总市值'].rank(ascending=False)/len(df)
#     df['成交额_rank'] = df['成交额'].rank(ascending=False)/len(df)
#     df['振幅_rank'] = df['振幅'].rank(ascending=False)/len(df)
#     df['涨跌幅_rank'] = df['涨跌幅'].rank(ascending=False)/len(df)
# #     df['换手率_rank'] = df['换手率'].rank(ascending=False)/len(df)
#     df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
#     df['资金贡献_rank'] = df['资金贡献'].rank(ascending=False)/len(df)
#     df['市销率_rank'] = df['市销率'].rank(ascending=False)/len(df)
#     df['市盈率_rank'] = df['市盈率'].rank(ascending=False)/len(df)
#     df['市净率_rank'] = df['市净率'].rank(ascending=False)/len(df)
#     if today not in dates:
#         collection.insert_many(df.to_dict("records"))
#         print(df)
#     df = pd.DataFrame()
# print("获取聚宽股票完毕")


# collection=db[f"聚宽可转债"]
# codes=get_all_securities(types=['conbond'])
# codes.rename_axis("代码", inplace=True)
# codes.reset_index(inplace=True)
# start_date= datetime.date(2018, 1, 1)
# end_date = datetime.date.today()
# collection.drop()
# print(codes)
# for code in codes["代码"]:
#     print(code)
#     df=get_price(code)
#     df['代码']=code
#     df['代码'] = df['代码'].str.extract('(\d+)').astype(float)
#     print(df)
#     collection.insert_many(df.to_dict("records"))


# !python -m pip install --upgrade pip --user
# !python -m pip install pandas
# !python -m pip install xarray
# !python -m pip install datetime
# !python -m pip install pymongo


# from jqdata import *
# import pandas as pd
# # 设置回测 ID
# backtest_id = '016559f825239b5c842262bd74a834a9'
# # 获取回测报告
# gt = get_backtest(backtest_id)
# df=gt.get_orders(start_date=None, end_date=None)
# df=pd.DataFrame(df)
# df = df.rename(columns={'time': '时间','action': '开平仓', 
#                         'amount': '数量', 'commission':'手续费','filled': '已成交量', 
#                         'gains': '收益', 'price':'成交价','security': '标的代码', 
#                         'status': '订单状态', 'type':'委托方式'})
# df.to_csv(f"回测{backtest_id}.csv")
# df2=gt.get_positions(start_date=None, end_date=None)
# df2=pd.DataFrame(df2)
# df2.to_csv(f"持仓{backtest_id}.csv")
# print(df,df2)


# # 获取股票基本面
import pandas as pd
name = ("000", "001", "002", "600", "601", "603", "605")
today= datetime.date(2018, 1, 3)
df = get_all_securities(types=['stock'],date=today).index
# df = get_all_securities(types=['etf'],date=today).index
df = get_all_securities(types=['stock'], date=today)
df = df[~df['display_name'].str.contains("S")]
df = df[~df['display_name'].str.contains("退")]
df=df.index
stocks = df[df.str.startswith(name)].tolist()
# curr_data = get_current_data()
# stocks=[stock for stock in df if not (
#     # (curr_data[stock].day_open == curr_data[stock].high_limit) or  # 涨停开盘
#     # (curr_data[stock].day_open == curr_data[stock].low_limit) or  # 跌停开盘
#     curr_data[stock].paused or  # 停牌
#     curr_data[stock].is_st or  # ST
#     ('ST' in curr_data[stock].name) or
#     ('*' in curr_data[stock].name) or
#     ('退' in curr_data[stock].name) 
# )]
# 获取一天数据frequency='1d'，或者一分钟数据frequency='1m'
df = get_price(stocks,frequency='1d',count=1,end_date=today-datetime.timedelta(days=1),
                fields=['open', 'high', 'low', 'close','pre_close','money'],panel=False)
df = df.rename(columns={'time': '日期','code': '代码','open': '开盘', 'high': '最高', 'low': '最低', 
    'close': '收盘','pre_close':'昨收','money': '成交额'})
# 增加基本面数据
df_fundamentals = get_fundamentals(query(
    valuation.code, valuation.market_cap, valuation.pe_ratio,income.total_operating_revenue,
    balance.total_assets, balance.total_liability), date=today-datetime.timedelta(days=1),)
df_fundamentals = df_fundamentals.rename(columns={"code": "代码", "market_cap":"总市值","pe_ratio":"市盈率",
                                    "total_operating_revenue":"营收","total_assets": "总资产", "total_liability": "总负债"})
df= pd.merge(df, df_fundamentals, on='代码') # 增加设置基本面因子
df_valuation= get_valuation(stocks,count=1,end_date=today-datetime.timedelta(days=1),fields=['capitalization', 'market_cap','turnover_ratio'])
df_valuation = df_valuation.rename(columns={'time':'日期','code': '代码','turnover_ratio': '换手率'})
df= pd.merge(df, df_valuation, on='代码') # 增加设置换手率因子
# 资金波动因子(反映控盘程度)
df['振幅'] = (df['最高'] - df['最低']) / df['开盘']
df['资金波动'] = df['振幅'] / df['成交额']
df['涨跌幅'] = (df['收盘'] / df['昨收'])-1
df['资金贡献'] = df['涨跌幅'] / df['成交额']
# # 基本面市销率因子(反映成长性)加不加区别不大
df['净资产']= df['总资产'] - df['总负债']
df['资产负债率']=df['总资产']/df['总负债']
df['市销率']=df['营收']/(df['总市值']*100000000)
df['市净率']=df['净资产']/(df['总市值']*100000000)
df['市盈率']=1/df['市盈率']
df = df[['日期','代码','开盘','收盘','最高','最低','昨收','成交额','总市值','总资产','总负债','净资产','营收','市盈率','市净率','市销率','资产负债率','换手率','振幅','资金波动','资金贡献','涨跌幅']]
# write_file('非ST股票（日k）.csv',df.to_csv(),append=True)
# # 截面因子（标的排名因子）
# df['总市值_rank'] = df['总市值'].rank(ascending=False)/len(df)
# df['成交额_rank'] = df['成交额'].rank(ascending=False)/len(df)
# df['振幅_rank'] = df['振幅'].rank(ascending=False)/len(df)
# df['涨跌幅_rank'] = df['涨跌幅'].rank(ascending=False)/len(df)
# df['换手率_rank'] = df['换手率'].rank(ascending=False)/len(df)
# df['资金波动_rank'] = df['资金波动'].rank(ascending=False)/len(df)
# df['资金贡献_rank'] = df['资金贡献'].rank(ascending=False)/len(df)
# df['市销率_rank'] = df['市销率'].rank(ascending=False)/len(df)
# df['市盈率_rank'] = df['市盈率'].rank(ascending=False)/len(df)
# df['市净率_rank'] = df['市净率'].rank(ascending=False)/len(df)
# df=df[df['资金波动_rank']<0.01至0.1都是好的范围]
# df=df[df['资金波动_rank']<0.1]
# df=df[df['资金贡献_rank']<0.1]
# df=df[df['市销率_rank']>0.5]
# df=df[df['市盈率_rank']>0.5]
# df=df[df['市净率_rank']>0.5]
dfall=df
df=df[(df['市净率']>(1/4))]
df=df[(df['市销率']>(1/15))]
df=df[(df['市盈率']>(1/50))]
print(len(dfall),len(df))