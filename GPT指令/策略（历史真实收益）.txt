工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

一、注意事项：
1.尽量使用向量化计算，避免频繁使用解释器导致效率降低
2.直接给我完整代码
3.可以使用参考代码，但是不一定准确，请你批判的使用

二、规则说明
1.计算真实的持仓：在买入日拿所属份数资金的余额（即当日待分配资金）除以标的数量确定每个标的的金额，确定每个标的的可用资金；
2.对每一个标的根据购买日收盘价加上0.01元作为真实的购买价格，这个价格乘以100股即为最小下单金额，使用每个标的的可用资金模以最小下单金额作为无法买入资金，然后使用每个标的的可用资金减去无法买入资金，即为真实的下单金额。
3.持有30日到卖出日的时候，在卖出价格上减去0.01的滑点再乘以100股/手作为购买金额（之后再扣除千分之一的印花税和万分之5的手续费），这样即为该标的的真实买入和卖出金额；
3.每日的持仓标的尽量少一些，不然计算起来会非常麻烦。
4.直接给我完整代码，辛苦你了，改天请你吃烧烤，谢谢。
参考资料：https://github.com/bithomeswap/quant

一、参考代码
import choose
import pandas as pd
import os
import datetime
names = ["COIN", "股票", "指数", "行业"]
# names = ["指数", "行业"]

# 获取当前.py文件的绝对路径
file_path = os.path.abspath(__file__)
# 获取当前.py文件所在目录的路径
dir_path = os.path.dirname(file_path)
# 获取当前.py文件所在目录的上两级目录的路径
dir_path = os.path.dirname(os.path.dirname(dir_path))
files = os.listdir(dir_path)
for file in files:
    for filename in names:
        if (filename in file) & ("指标" in file) & ("排名" not in file) & ("细节" not in file) & ("分钟" not in file):
            try:
                # 获取文件名和扩展名
                name, extension = os.path.splitext(file)
                path = os.path.join(dir_path, f"{name}.csv")
                df = pd.read_csv(path)
                if ("COIN" in name):
                    n = 2021
                    start_date = datetime.datetime(
                        n, int(1), int(1)).strftime("%Y-%m-%d %H:%M:%S")
                    end_date = datetime.datetime(datetime.datetime.strptime(
                        start_date, "%Y-%m-%d %H:%M:%S").year + 3, int(1), int(1)).strftime("%Y-%m-%d %H:%M:%S")
                    df = df[df["日期"] >= start_date]
                    df = df[df["日期"] <= end_date]
                if "股票" in name:  # 数据截取
                    n = 2019
                    start_date = datetime.datetime(
                        n, int(1), int(1)).strftime("%Y-%m-%d %H:%M:%S")
                    end_date = datetime.datetime(datetime.datetime.strptime(
                        start_date, "%Y-%m-%d %H:%M:%S").year + 3, int(1), int(1)).strftime("%Y-%m-%d %H:%M:%S")
                    df = df[(df["日期"] >= start_date) & (df["日期"] <= end_date)]
                df = df.sort_values(by="日期")  # 以日期列为索引,避免计算错误
                dates = df["日期"].copy().drop_duplicates().tolist()  # 获取所有不重复日期
                df = df.groupby(["代码"], group_keys=False).apply(choose.technology)

                m = 0.001  # 设置默认手续费
                n = 6  # 设置默认持仓周期
                df, m, n = choose.choose("交易", name, df)

                if ("COIN" in name):
                    for i in range(1, n+1):
                        df = df[df[f"{i}日后总涨跌幅（未来函数）"] <= 10*n]
                if ("股票" in name):
                    for i in range(1, n+1):
                        df = df[df[f"{i}日后总涨跌幅（未来函数）"] <= 3*n]

                trade_path = os.path.join(os.path.abspath("."), "资产交易细节")
                if not os.path.exists(trade_path):
                    os.makedirs(trade_path)
                df.to_csv(f"{trade_path}/{name}周期{n}交易细节.csv", index=False)
                print("交易细节已输出")

                result_df = pd.DataFrame({})
                for i in range(1, n+1):
                    # 持有n天则掉仓周期为n，实际上资金实盘当中是单独留一份备用金补给亏的多的日期以及资金周转
                    days = dates[i::n+1]
                    daydf = df[df["日期"].isin(days)]

                    # tradedaypath = os.path.join(os.path.abspath("."), "资产分组交易细节")
                    # if not os.path.exists(tradedaypath):
                    #     os.makedirs(tradedaypath)
                    # daydf.to_csv(f"{tradedaypath}/{name}周期{i}交易细节.csv", index=False)

                    result = []
                    cash_balance = 1  # 初始资金设置为1元
                    twocash_balance = 1
                    # 每份资金的收益率
                    for date, group in daydf.groupby("日期"):
                        daily_cash_balance = {}  # 用于记录每日的资金余额
                        if not group.empty:  # 如果当日没有入选标的，则收益率为0
                            for x in range(1, n+1):
                                if x < n:
                                    group_return = ((group[f"{x}日后总涨跌幅（未来函数）"]).mean() + 1)  # 计算平均收益率
                                if x == n:
                                    group_return = group_return*(1-m)
                                    cash_balance *= group_return  # 复投累计收益率
                                    # 不复投累计收益率
                                    twocash_balance += (group_return-1)
                                daily_cash_balance[f"未来{x}日盘中资产收益"] = group_return
                        daily_cash_balance[f"下周期余额复投"] = cash_balance
                        daily_cash_balance[f"下周期余额不复投"] = twocash_balance
                        result.append(
                            {"日期": date, f"第{i}份资金盘中资产收益": daily_cash_balance})
                    result_df = pd.concat([result_df, pd.DataFrame(result)])

                manyday = pd.DataFrame({"日期": dates})
                manyday = manyday[~manyday["日期"].isin(df["日期"])]
                # 将两个数据集根据key列进行合并
                result_df = pd.concat([result_df,  manyday])
                result_df = result_df.sort_values(
                    by="日期").reset_index(drop=True)

                for i in range(1, n+1):  # 对每一份资金列分别根据对应的数据向下填充数据
                    cash = 1
                    twocash = 1
                    firstcash=1000000 # 假设初始资金每天分配100万元
                    daysindex = result_df[result_df[f"第{i}份资金盘中资产收益"].notna()].copy()["日期"]
                    for dayindex in daysindex:
                        fill = result_df[result_df["日期"]
                                         == dayindex][f"第{i}份资金盘中资产收益"]
                        for col, val in fill.items():
                            for x, (colnum, value) in enumerate(val.items()):
                                if x < n:
                                    # print(col, val, colnum, value)
                                    result_df.at[col+x+1,
                                                 f"第{i}份资金周期资产收益"] = value
                                    result_df.at[col+x+1,
                                                 f"第{i}份资金累积资产收益复投"] = value*cash
                                    result_df.at[col+x+1,
                                                 f"第{i}份资金累积资产收益不复投"] = value*twocash
                                if x == n:
                                    nextcash = value
                                    cash = nextcash
                                if x == n+1:
                                    twonextcash = value
                                    twocash = twonextcash
                for i in range(1, n+1):  # 对每一份资金列分别根据对应的数据向下填充数据
                    result_df[f"第{i}份资金周期资产收益"] = result_df[f"第{i}份资金周期资产收益"].fillna(1)
                    result_df[f"第{i}份资金累积资产收益复投"] = result_df[f"第{i}份资金累积资产收益复投"].fillna(
                        method="ffill").fillna(1)
                    result_df[f"第{i}份资金累积资产收益不复投"] = result_df[f"第{i}份资金累积资产收益不复投"].fillna(
                        method="ffill").fillna(1)
                # 使用 filter() 方法选择所有包含指定子字符串的列
                retrade = result_df.filter(like="资金累积资产收益复投").columns
                result_df["总资产收益率（复投）%"] = (
                    result_df[retrade].mean(axis=1)-1)*100
                notretrade = result_df.filter(like="资金累积资产收益不复投").columns
                result_df["总资产收益率（不复投）%"] = (
                    result_df[notretrade].mean(axis=1)-1)*100
                print("持仓周期", n, "复投收益率", result_df["总资产收益率（复投）%"])
                # 新建涨跌分布文件夹在上级菜单下，并保存结果
                path = os.path.join(os.path.abspath("."), "资产变动")
                if not os.path.exists(path):
                    os.makedirs(path)
                result_df.to_csv(f"{path}/{name}周期{n}真实收益.csv", index=False)
                print("任务已经完成！")
            except Exception as e:
                print(f"发生bug: {e}")
