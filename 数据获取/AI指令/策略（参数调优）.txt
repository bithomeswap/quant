import os
import pandas as pd
import choose
工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

一、注意事项：
1.尽量使用向量化计算，避免频繁使用解释器导致效率降低
2.直接给我完整代码
3.可以使用参考代码，但是不一定准确，请你批判的使用

二、规则说明
1.可以但是不限制于使用梯度下降方法，寻找'df = df[(df['昨日资金波动_rank'] <= w*value/rank)].copy()
                df = df[(df['昨日资金贡献_rank'] <= 2w*value/rank)].copy()'的最优值
2.给我能进行参数调优，并且观察到不同参数下收益情况的代码
一、参考代码
import math

def technology(df):  # 定义计算技术指标的函数
    try:
        for n in range(1, 16):
            df[f'{n}日后总涨跌幅（未来函数）'] = (df['收盘'].copy().shift(-n) / df['收盘']) - 1
            df[f'{n}日后当日涨跌（未来函数）'] = df['涨跌幅'].copy().shift(-n)+1
    except Exception as e:
        print(f"发生bug: {e}")
    return df


def choose(choosename, name, df):
    if choosename == '交易':
        code = df['代码'].copy().drop_duplicates().tolist()  # 获取标的数量
        rank = math.ceil(len(code)/100)
        value = math.log(len(code))
        print(name, '数量', len(code), '拟选择标的数量', rank, '阈值标准', value)
        if rank < 5:
            print(name, "标的数量过少,不适合大模型策略")
        if ('COIN' in name):
            if ('分钟' not in name):
                df = df[df[f'开盘'] >= 0.00001000].copy()  # 过滤低价股
                df = df[df[f'昨日成交额'] >= 900000].copy()  # 过滤小盘股
                df = df[(df['昨日资金波动_rank'] <= w*value/rank)].copy()
                df = df[(df['昨日资金贡献_rank'] <= 2w*value/rank)].copy()
                df = df.groupby(['日期'], group_keys=True).apply(
                    lambda x: x.nlargest(rank, '昨日资金波动')).reset_index(drop=True)
                m = 0.003  # 设置手续费
                n = 6  # 设置持仓周期
        if ('股票' in name):
            if ('分钟' not in name):
                df = df[(df['真实价格'] >= 4)].copy()  # 过滤低价股
                df = df[(df['开盘收盘幅'] <= 0.08) & (df['开盘收盘幅'] >= -0.01)].copy()  # 过滤可能产生大回撤的股票
                df = df[(df['昨日资金波动_rank'] <= w*value/rank)].copy()
                df = df[(df['昨日资金贡献_rank'] <= 3w*value/rank)].copy()
                df = df.groupby(['日期'], group_keys=True).apply(
                    lambda x: x.nlargest(rank, '昨日资金波动')).reset_index(drop=True)
                m = 0.005  # 设置手续费
                n = 15  # 设置持仓周期
        print(len(df), name)
    return df, m, n
