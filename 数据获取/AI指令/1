import math
import os
import talib
import pandas as pd
import requests
import json
import time
from pymongo import MongoClient
from binance.client import Client
工作场景：
你是一名非常优秀的计算机工程师，注重代码的简洁性和可维护性，并且习惯采用向量化计算的手段提高代码的运行效率，同时你的代码当中很少有bug存在

一、注意事项：
1.尽量使用向量化计算，避免使用if语句和for循环，避免频繁使用解释器导致效率降低
2.直接给我完整代码
3.可以使用参考资料，但是不一定准确，请你批判的使用

二、规则说明
1.每日获取最近130个交易日的历史数据，进行指标计算，并筛选出符合要求的股票到钉钉进行二次分析
2.分别有两个数据库，一个是STOCK，一个是COIN，这里以STOCK为例
3.首先以日期分组，确定当日'BTCUSDT'的['SMA121开盘比值']列的值大于等于一，则标记为震荡策略，否则则标记为超跌
4.执行震荡策略时，使用如下代码筛选之后的结果就是目标标的
   # 牛市过滤
   for n in range(1, 10):  # 计算未来n日涨跌幅
        df = df[df[f'SMA{n*10}开盘比值'] >= 0.99].copy()
    # 选取当天'开盘'最低的
    n_top = math.floor(len(df)/20)
    df = df.nsmallest(n_top, '开盘')

5.执行超跌策略时，使用如下代码筛选之后的结果就是目标标的
   # 熊市过滤
   df = df[df['SMA120开盘比值'] <= 0.5].copy()
    for n in range(1, 10):  # 计算未来n日涨跌幅
        df = df[df[f'{n*10}日最低开盘价比值'] >= 1+n*0.01].copy()
6.将筛选出来的标的及细节发送到钉钉

参考资料：https: //github.com/bithomeswap/quant


一、数据获取参考代码
# -*- coding: utf-8 -*-
# 指定解释器位置
#!/root/miniconda3/bin/python
# nohup /root/miniconda3/bin/python /root/binance_trade_tool_vpn/quant/数据获取/getbtc指标.py
# 安装币安的python库
# pip install python-binance

# 币安的api配置
api_key = "0jmNVvNZusoXKGkwnGLBghPh8Kmc0klh096VxNS9kn8P0nkAEslVUlsuOcRoGrtm"
api_secret = "PbSWkno1meUckhmkLyz8jQ2RRG7KgmZyAWhIF0qPdCJrmDSFxoxGdMG5gZeYYCgy"

# 需要写入的数据库配置
client = MongoClient(
    'mongodb://wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000')
db = client['wth000']
name = 'COIN'
collection = db[f'{name}']
collection.drop()  # 清空集合中的所有文档

# 创建Binance客户端
client = Client(api_key, api_secret)

# 获取所有USDT计价的现货交易对
ticker_prices = client.get_exchange_info()['symbols']

usdt_ticker_prices = [
    ticker_price for ticker_price in ticker_prices if ticker_price['quoteAsset'] == 'USDT' and ("DOWN" not in ticker_price['symbol']) and ("UP" not in ticker_price['symbol'])]

print(f"当前币安现货有{len(ticker_prices)}个交易对")
# 遍历所有现货交易对，并获取日K线数据
for ticker_price in usdt_ticker_prices:
    symbol = ticker_price['symbol']
    klines = client.get_historical_klines(
        symbol=symbol,
        interval=Client.KLINE_INTERVAL_1DAY,
        limit=130
    )
# KLINE_INTERVAL_1MINUTE = '1m'
# KLINE_INTERVAL_3MINUTE = '3m'
# KLINE_INTERVAL_5MINUTE = '5m'
# KLINE_INTERVAL_15MINUTE = '15m'
# KLINE_INTERVAL_30MINUTE = '30m'
# KLINE_INTERVAL_1HOUR = '1h'
# KLINE_INTERVAL_2HOUR = '2h'
# KLINE_INTERVAL_4HOUR = '4h'
# KLINE_INTERVAL_6HOUR = '6h'
# KLINE_INTERVAL_8HOUR = '8h'
# KLINE_INTERVAL_12HOUR = '12h'
# KLINE_INTERVAL_1DAY = '1d'
    # 插入到集合中
    data_list = []
    for kline in klines:
        timestamp = kline[0] / 1000
        date = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp))
        # 如果没有，则加入到数据列表中
        data_list.append({'timestamp': timestamp,
                          '代码': symbol,
                          '日期': date,
                          '开盘': float(kline[1]),
                          '最高': float(kline[2]),
                          '最低': float(kline[3]),
                          '收盘': float(kline[4]),
                          '成交量': float(kline[5]),
                          '收盘timestamp': float(kline[6]/1000),
                          '成交额': float(kline[7]),
                          '成交笔数': float(kline[8]),
                          '主动买入成交量': float(kline[9]),
                          '主动买入成交额':  float(kline[10])
                          })
    collection.insert_many(data_list)
    # 已经是列表对象了，不用再调用.to_dist方法
print('任务已经完成')
# time.sleep(3600)
# limit = 400000
# if collection.count_documents({}) >= limit:
#     oldest_data = collection.find().sort([('日期', 1)]).limit(
#         collection.count_documents({})-limit)
#     ids_to_delete = [data['_id'] for data in oldest_data]
#     collection.delete_many({'_id': {'$in': ids_to_delete}})
#     # 往外读取数据的时候再更改索引吧
# print('数据清理成功')


二、指标计算参考代码

# 连接MongoDB数据库
client = MongoClient(
    'mongodb://wth000:wth000@43.159.47.250:27017/dbname?authSource=wth000')
db = client['wth000']
name = "COIN"
collection = db[f'{name}']
# 获取数据并转换为DataFrame格式
data = pd.DataFrame(list(collection.find()))
print("数据读取成功")


def get_technical_indicators(df):  # 定义计算技术指标的函数
    # 过滤最高价和最低价为负值的数据
    df = df.loc[(df['最高'] >= 0) & (df['最低'] >= 0)]
    df = df.sort_values(by='日期')    # 以日期列为索引,避免计算错误

    # 计算昨日成交额
    df['昨日成交额'] = df.shift(1)['成交额'].astype(float)
    # 定义开盘收盘幅
    df['开盘收盘幅'] = (df['开盘']/df.shift(1)['收盘'] - 1)*100
    # 定义收盘幅即涨跌幅
    df['涨跌幅'] = (df['收盘']/df.shift(1)['收盘'] - 1)*100

    df = df.dropna()  # 删除缺失值，避免无效数据的干扰

    df['未来60日最高开盘价'] = df['开盘'].rolling(60).max().shift(-60)
    df['未来60日最低开盘价'] = df['开盘'].rolling(60).min().shift(-60)
    df['未来60日最高开盘价日期'] = df['开盘'].rolling(60).apply(
        lambda x: x.argmax(), raw=True).shift(-60)
    df['未来60日最低开盘价日期'] = df['开盘'].rolling(60).apply(
        lambda x: x.argmin(), raw=True).shift(-60)

    for n in range(1, 17):  # 计算未来n日涨跌幅
        df[f'{n}日后总涨跌幅（未来函数）'] = df['收盘'].pct_change(n).shift(-n)*100
        df[f'{n*10}日最高开盘价比值'] = df['开盘']/df['开盘'].rolling(n*10).max()
        df[f'{n*10}日最低开盘价比值'] = df['开盘']/df['开盘'].rolling(n*10).min()
        df[f'SMA{n*10}开盘比值'] = df['开盘'] / \
            talib.MA(df['开盘'].values, timeperiod=n*10, matype=0)
        df[f'SMA{n*10}昨日成交额比值'] = df['昨日成交额'] / \
            talib.MA(df['昨日成交额'].values, timeperiod=n*10, matype=0)

    return df


# 按照“代码”列进行分组并计算技术指标
grouped = data.groupby('代码').apply(get_technical_indicators)

# 获取当前.py文件的绝对路径
file_path = os.path.abspath(__file__)
# 获取当前.py文件所在目录的路径
dir_path = os.path.dirname(file_path)
# 获取当前.py文件所在目录的上两级目录的路径
parent_dir_path = os.path.dirname(os.path.dirname(dir_path))

# 保存数据到指定目录
file_path = os.path.join(parent_dir_path, f'{name}指标.csv')
grouped.to_csv(file_path, index=False)
print('准备插入数据')
# 连接MongoDB数据库并创建新集合
new_collection = db[f'{name}指标']
new_collection.drop()  # 清空集合中的所有文档
# 将数据分批插入
batch_size = 5000  # 批量插入的大小
num_batches = len(grouped) // batch_size + 1
for i in range(num_batches):
    start_idx = i * batch_size
    end_idx = (i + 1) * batch_size
    data_slice = grouped[start_idx:end_idx]
    new_collection.insert_many(data_slice.to_dict('records'))

url = 'https://oapi.dingtalk.com/robot/send?access_token=f5a623f7af0ae156047ef0be361a70de58aff83b7f6935f4a5671a626cf42165'
headers = {'Content-Type': 'application/json;charset=utf-8'}

data = {
    "msgtype": "text",
    "text": {
        "content": "coin指标计算成功"
    }
}

r = requests.post(url, headers=headers, data=json.dumps(data))
print(r.content.decode('utf-8'))

三、选股标准参考代码

name = 'COIN'
# name = 'STOCK'
# name = 'COIN止损'
# name = 'STOCK止损'

# 获取当前.py文件的绝对路径
file_path = os.path.abspath(__file__)
# 获取当前.py文件所在目录的路径
dir_path = os.path.dirname(file_path)
# 获取当前.py文件所在目录的上四级目录的路径
dir_path = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.dirname(dir_path))))
file_path = os.path.join(dir_path, f'{name}指标.csv')
df = pd.read_csv(file_path)

# 去掉n日后总涨跌幅大于百分之三百的噪音数据
for n in range(1, 9):
    df = df[df[f'{n}日后总涨跌幅（未来函数）'] <= 300*(1+n*0.2)]

# 获取自制成分股指数
code_count = len(df['代码'].drop_duplicates())
n_stock = math.ceil(code_count / 500)
codes = df.groupby('代码')['成交额'].mean().nlargest(n_stock).index.tolist()
df_mean = df[df['代码'].isin(codes)]
print("自制成分股指数为：", codes)
# 计算每个交易日成分股的'SMA120开盘比值'均值
df_mean = df_mean.groupby('日期')['SMA120开盘比值'].mean().reset_index(name='均值')
# 根据规则对每个交易日进行标注
df_mean['策略'] = df_mean['均值'].apply(lambda x: '震荡策略' if x > 1 else '超跌策略')
# 输出到csv文件
df_mean.to_csv(f'{name}牛熊特征.csv', index=False)


def oscillating_strategy(df):  # 实现震荡策略
    # print(len(df))
    if 'coin' in name.lower():
        # 牛市过滤
        for n in range(1, 10):  # 计算未来n日涨跌幅
            df = df[df[f'SMA{n*10}开盘比值'] >= 0.99].copy()
        # 选取当天'开盘'最低的
        n_top = math.floor(len(df)/20)
        df = df.nsmallest(n_top, '开盘')
    if 'stock' in name.lower():
        # 牛市过滤
        for n in range(1, 10):  # 计算未来n日涨跌幅
            df = df[df[f'SMA{n*10}开盘比值'] >= 0.99].copy()
        # 选取当天'开盘'最低的
        n_top = math.floor(len(df)/20)
        df = df.nsmallest(n_top, '开盘')
        df = df[(df['开盘收盘幅'] <= 8) & (df['开盘收盘幅'] >= 0)]
    return df


def oversold_strategy(df):  # 实现超跌策略
    # print(len(df))
    if 'coin' in name.lower():
        # 熊市过滤
        df = df[df['SMA120开盘比值'] <= 0.5].copy()
        for n in range(1, 10):  # 计算未来n日涨跌幅
            df = df[df[f'{n*10}日最低开盘价比值'] >= 1+n*0.01].copy()

    if 'stock' in name.lower():
        # 熊市过滤
        df = df[df['SMA120开盘比值'] <= 0.6].copy()
        for n in range(1, 10):  # 计算未来n日涨跌幅
            df = df[df[f'{n*10}日最低开盘价比值'] >= 1+n*0.01].copy()
        df = df[
            (df['开盘收盘幅'] <= 8)
            &
            (df['开盘收盘幅'] >= 0)
        ]
        # print('测试标的为股票类型，默认高开百分之八无法买入')
    return df


selectedzhendang = pd.DataFrame(columns=[])
selectedchaodie = pd.DataFrame(columns=[])
# 记录每个交易日是否执行了策略，并输出到csv文件中
for date, group in df.groupby('日期'):
    # 如果当日没有入选标的，则单日收益率为0
    if group.empty:
        daily_return = 0
    else:
        # 过滤掉空数据
        if df_mean[df_mean['日期'] == date]['策略'].size > 0:
            # 根据标注的策略执行相应的策略
            if df_mean[df_mean['日期'] == date]['策略'].iloc[0] == '震荡策略':
                selected_stocks = oscillating_strategy(group)
                selectedzhendang = pd.concat(
                    [selectedzhendang, selected_stocks])
            else:
                selected_stocks = oversold_strategy(group)
                selectedchaodie = pd.concat([selectedchaodie, selected_stocks])

selectedzhendang.to_csv(f'{name}标的震荡策略详情.csv', index=False)
selectedchaodie.to_csv(f'{name}标的超跌策略详情.csv', index=False)

cash_balance_zhendang = 1  # 假设开始时有1元资金（震荡策略）
cash_balance_chaodie = 1  # 假设开始时有1元资金（超跌策略）
daily_cash_balance_zhendang = pd.DataFrame(
    columns=['日期', '资金余额'])  # 用于记录每日的资金余额（震荡策略）
daily_cash_balance_chaodie = pd.DataFrame(
    columns=['日期', '资金余额'])  # 用于记录每日的资金余额（超跌策略）

m = 0.01  # 设置手续费
if 'stock' in name.lower():
    n = 16  # 设置持仓周期
if 'coin' in name.lower():
    n = 6  # 设置持仓周期

df_daily_return_zhendang = pd.DataFrame(columns=['日期', '收益率'])
# 记录每个交易日是否执行了策略，并输出到csv文件中
for date, group in selectedzhendang.groupby('日期'):
    # 如果当日没有入选标的，则单日收益率为0
    if group.empty:
        daily_return = 0
    else:
        daily_return = (group[f'{n}日后总涨跌幅（未来函数）'] +
                        100).mean()*(1-m)/100-1  # 计算平均收益率
    # 更新资金余额并记录每日资金余额
    df_daily_return_zhendang = pd.concat(
        [df_daily_return_zhendang, pd.DataFrame({'日期': [date], '收益率': [daily_return]})])
    cash_balance_zhendang *= (1 + daily_return)
    daily_cash_balance_zhendang = pd.concat(
        [daily_cash_balance_zhendang, pd.DataFrame({'日期': [date], '资金余额': [cash_balance_zhendang]})])

df_daily_return_chaodie = pd.DataFrame(columns=['日期', '收益率'])
# 记录每个交易日是否执行了策略，并输出到csv文件中
for date, group in selectedchaodie.groupby('日期'):
    # 如果当日没有入选标的，则单日收益率为0
    if group.empty:
        daily_return = 0
    else:
        daily_return = (group[f'{n}日后总涨跌幅（未来函数）'] +
                        100).mean()*(1-m)/100-1  # 计算平均收益率
    # 更新资金余额并记录每日资金余额
    df_daily_return_chaodie = pd.concat(
        [df_daily_return_chaodie, pd.DataFrame({'日期': [date], '收益率': [daily_return]})])
    cash_balance_chaodie *= (1 + daily_return)
    daily_cash_balance_chaodie = pd.concat(
        [daily_cash_balance_chaodie, pd.DataFrame({'日期': [date], '资金余额': [cash_balance_chaodie]})])


daily_cash_balance_zhendangpd = pd.merge(
    df_daily_return_zhendang, daily_cash_balance_zhendang, on='日期')
daily_cash_balance_chaodie = pd.merge(
    df_daily_return_chaodie, daily_cash_balance_chaodie, on='日期')

daily_cash_balance_zhendangpd.to_csv(f'{name}标的震荡策略资产状况.csv', index_label='日期')
daily_cash_balance_chaodie.to_csv(f'{name}标的超跌策略资产状况.csv', index_label='日期')

# 设置参数
names = ['分钟COIN', '分钟深证', '分钟上证',]
# names = ['COIN', '深证', '上证',]


for name in names:
    try:
        # 获取当前.py文件的绝对路径
        file_path = os.path.abspath(__file__)
        # 获取当前.py文件所在目录的路径
        dir_path = os.path.dirname(file_path)
        # 获取当前.py文件所在目录的上两级目录的路径
        dir_path = os.path.dirname(os.path.dirname(dir_path))
        file_path = os.path.join(dir_path, f'{name}指标.csv')
        df = pd.read_csv(file_path)

        code_count = len(df['代码'].drop_duplicates())
        print("标的数量", code_count)

        for n in range(1, 9):  # 去掉n日后总涨跌幅大于百分之三百的噪音数据
            df = df[df[f'{n}日后总涨跌幅（未来函数）'] <= 3*(1+n*0.2)]

        if ('coin' in name.lower()):
            if ('分钟' not in name.lower()):
                df = df[df[f'开盘'] >= 0.00001000].copy()  # 开盘价过滤高滑点股票
                df = df[df[f'昨日成交额'] >= 1000000].copy()  # 昨日成交额过滤劣质股票
                df = df[(df['开盘_rank'] >= 0.5)].copy()  # 真实价格过滤劣质股票

                df = df[(df['昨日资金波动_rank'] <= 0.1)].copy()
                df = df[(df['昨日资金贡献_rank'] <= 0.1)].copy()
                df = df[(df['昨日资金成本_rank'] >= 0.5)].copy()
                df = df[(df['昨日成交额_rank'] >= 0.5)].copy()
                df = df[(df['昨日振幅_rank'] >= 0.1) & (
                    df[f'昨日振幅_rank'] <= 0.9)].copy()
                df = df[(df['昨日涨跌_rank'] >= 0.1) & (
                    df[f'昨日涨跌_rank'] <= 0.9)].copy()
                for n in (2, 9):
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.1) & (df[f'过去{n}日总涨跌_rank'] <= 0.9)].copy()
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.1) & (df[f'过去{n}日总涨跌_rank'] <= 0.9)].copy()
                m = 0.003  # 设置手续费
                n = 6  # 设置持仓周期
            if ('分钟' in name.lower()):
                df = df[df[f'开盘'] >= 0.00001000].copy()  # 开盘价过滤高滑点股票
                for n in (2, 9):
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.5)].copy()
                    df = df[(df[f'过去{n*5}日总涨跌_rank'] >= 0.5)].copy()
                m = 0.0000  # 设置手续费
                n = 6  # 设置持仓周期
            print(len(df), name)
        if ('证' in name.lower()):
            if ('分钟' not in name.lower()):
                df = df[(df['真实价格'] >= 4)].copy()  # 真实价格过滤劣质股票
                df = df[(df['开盘收盘幅'] <= 0.01)].copy()  # 开盘收盘幅过滤涨停无法买入股票
                df = df[(df['真实价格_rank'] <= 0.8) & (
                    df['真实价格_rank'] >= 0.2)].copy()  # 真实价格过滤劣质股票

                df = df[(df['昨日资金波动_rank'] <= 0.1)].copy()
                df = df[(df['昨日资金贡献_rank'] <= 0.1)].copy()
                df = df[(df['昨日资金成本_rank'] >= 0.5)].copy()
                df = df[(df['昨日成交额_rank'] >= 0.5)].copy()
                df = df[(df['昨日振幅_rank'] >= 0.1) & (
                    df[f'昨日振幅_rank'] <= 0.9)].copy()
                df = df[(df['昨日涨跌_rank'] >= 0.1) & (
                    df[f'昨日涨跌_rank'] <= 0.9)].copy()
                for n in (2, 9):
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.1) & (df[f'过去{n}日总涨跌_rank'] <= 0.9)].copy()
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.1) & (df[f'过去{n}日总涨跌_rank'] <= 0.9)].copy()
                m = 0.005  # 设置手续费
                n = 18  # 设置持仓周期
            if ('分钟' in name.lower()):
                df = df[(df['开盘'] >= 4)].copy()  # 真实价格过滤劣质股票
                for n in (2, 9):
                    df = df[(df[f'过去{n}日总涨跌_rank'] >= 0.5)].copy()
                    df = df[(df[f'过去{n*5}日总涨跌_rank'] >= 0.5)].copy()
                m = 0.0000  # 设置手续费
                n = 18  # 设置持仓周期
            print(len(df), name)

        # 将交易标的细节输出到一个csv文件
        trading_detail_filename = f'{name}交易细节.csv'
        df.to_csv(trading_detail_filename, index=False)

        # 假设开始时有1元资金,实操时每个月还得归集一下资金，以免收益不平均
        cash_balance = 1
        # 用于记录每日的资金余额
        daily_cash_balance = {}

        df_strategy = pd.DataFrame(columns=['日期', '执行策略'])
        df_daily_return = pd.DataFrame(columns=['日期', '收益率'])

        cash_balance_list = []
        # 记录每个交易日是否执行了策略，并输出到csv文件中
        for date, group in df.groupby('日期'):
            # 如果当日没有入选标的，则单日收益率为0
            if group.empty:
                daily_return = 0
            else:
                daily_return = ((group[f'{n}日后总涨跌幅（未来函数）'] +
                                1).mean()*(1-m)-1)/n  # 计算平均收益率
            df_daily_return = pd.concat(
                [df_daily_return, pd.DataFrame({'日期': [date], '收益率': [daily_return]})])
            # 更新资金余额并记录每日资金余额
            cash_balance *= (1 + daily_return)
            daily_cash_balance[date] = cash_balance
            cash_balance_list.append(cash_balance)  # 添加每日资金余额到列表中
        df_cash_balance = pd.DataFrame(
            {'日期': list(daily_cash_balance.keys()), '资金余额': list(daily_cash_balance.values())})
        df_strategy_and_return = pd.merge(
            df_daily_return, df_cash_balance, on='日期')
        # 输出每日执行策略和净资产收益率到csv文件
        # df_strategy_and_return.to_csv(f'/{name}每日策略和资产状况.csv', index=False)
        df_strategy_and_return.to_csv(f'./资产变动/{name}资产变动.csv', index=False)
    except Exception as e:
        print(f"发生bug: {e}")
